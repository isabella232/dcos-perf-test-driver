#!/usr/bin/env python
import argparse
import json
import logging
import os
import random
import re
import requests
import string
import sys
import time

# Running(0) or Creating(3)
VALID_STATUS = ( 0, 3 )

class CCMClusterApi:
  """
  Low-level CCM API
  """

  def __init__(self, baseUrl, authToken):
    self.baseUrl = baseUrl
    self.authToken = authToken
    self.logger = logging.getLogger('ccm.api')

  def execApi(self, action, method='get', data=None):
    methodFn = getattr(requests, method)
    headers = {
        'Authorization': 'Token %s' % self.authToken
    }

    self.logger.debug('Executing HTTP %s on %s/%s' % (method, self.baseUrl, action))
    self.logger.debug('Sending data: %r' % data)
    result = methodFn('%s/%s' % (self.baseUrl, action),
      headers=headers,
      data=data)

    if result.status_code == 204: # NO_CONTENT
      return (204, None)

    try:
      return (
        result.status_code,
        result.json()
      )
    except Exception as e:
      raise IOError('Invalid JSON received from %s/%s. Got: %s' % (
        self.baseUrl, action, result.text))

  def getAllClusters(self):
    self.logger.debug('Fetching all clusters')
    (code, data) = self.execApi('cluster/active/all/')
    if code != 200:
      raise IOError('Unable to query clusters (unexpected HTTP code %i)' % code)
    return data

  def getCluster(self, cluster_id):
    self.logger.debug('Fetching cluster %s' % cluster_id)
    (code, data) = self.execApi('cluster/%s/' % cluster_id)
    if code == 404:
      return None
    if code != 200:
      raise IOError('Unable to query cluster (unexpected HTTP code %i)' % code)
    return data

  def startCluster(self, data):
    self.logger.debug('Starting cluster %s' % (data['name'],))
    (code, data) = self.execApi('cluster/', method='post', data=data)
    if code != 201: # CREATED
      raise IOError('Unable to create cluster (unexpected HTTP code %i)' % code)
    return data

  def destroyCluster(self, cluster_id):
    self.logger.debug('Destroying cluster %s' % (cluster_id,))
    (code, data) = self.execApi('cluster/%s/' % cluster_id, method='delete')
    if code == 404:
      return None
    if code != 204:
      raise IOError('Unable to delete cluster (unexpected HTTP code %i)' % code)
    return None

  def extendCluster(self, cluster_id, time):
    self.logger.debug('Extending cluster %s by %s minutes' % (cluster_id, time))
    (code, data) = self.execApi('cluster/%s/' % cluster_id, method='put', data={
        'time': time
      })
    if code == 404:
      return None
    if code != 200:
      raise IOError('Unable to extend cluster (unexpected HTTP code %i)' % code)
    return None

class CCMClusterConfig:

  def __init__(self, config):

    # Check if we have a 'match' section
    self.match = None
    if 'match' in config:
      self.match = {
        'prefix': config.get('prefix', ''),
        'regex': re.compile(config.get('regex', '.*')),
        'region': config.get('region', '')
      }

    # Pre-populate configuration variables
    self.config = {
      'cloud_provider': config.get('provider', 0),
      'cluster_desc': config.get('desc', 'DC/OS Test Cluster'),
      'region': config.get('region', self.guessRegion()),
      'time': int(config.get('timeout', 1)) * 60,
      'adminlocation': config.get('adminlocation', '0.0.0.0/0'),
      'public_agents': config.get('public_agents', 1),
      'private_agents': config.get('private_agents', 1),
      'template': config.get('template', 'ee.single-master.cloudformation.json'),
      'channel': config.get('channel', 'testing/master'),
      'not_from_pool': bool(config.get('not_from_pool', True))
    }

    self.create_timeout = config.get('create_timeout', 600)

    # Compose a random name if `name_prefix` is given, otherwise use `name`
    rand = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(10))
    self.name = config.get('name_prefix', 'dcos-perf-test-') + rand
    if 'name' in config:
      self.name = config['name']

  def getClusterConfig(self):
    config = dict(self.config)
    config['name'] = self.name

    return config

  def guessRegion(self):
    return 'us-west-2'

class CCMClusterManager:

  def __init__(self):
    self.logger = logging.getLogger('cluster.ccm')

    # Locate CCM secret
    ccm_api_url = 'https://ccm.mesosphere.com/api'
    ccm_auth_token = os.environ.get('CCM_AUTH_TOKEN')

    # Throw an exception if there is no CCM auth token specified
    if not ccm_auth_token:
      raise ValueError('You need to specify a CCM authentication token')

    # Create CCM Cluster API
    self.logger.debug('Initializing CCM API to %s' % (ccm_api_url,))
    self.api = CCMClusterApi(ccm_api_url, ccm_auth_token)

  def findClusterByName(self, config):
    self.logger.debug('Looking for cluster \'%s\'' % config.name)
    clusters = self.api.getAllClusters()
    for c in clusters:
      if c['name'] == config.name:
        self.logger.debug('Found matching cluster with id %s (%s)' % (c['id'], c['name']))
        self.logger.debug('Cluster dump: %r' % c)
        return c
    return None

  def findClusterById(self, cluster_id):
    self.logger.debug('Looking for cluster with id \'%s\'' % cluster_id)
    c = self.api.getCluster(cluster_id)
    if c:
        self.logger.debug('Found matching cluster with id %s (%s)' % (c['id'], c['name']))
        self.logger.debug('Cluster dump: %r' % c)
        return c
    return None

  def createCluster(self, config):
    data = config.getClusterConfig()
    self.logger.info('Creating cluster %s' % (data['name']))
    self.logger.debug('Creating new cluster with specs: %r' % data)
    cluster = self.api.startCluster(data)
    if (not cluster) or (not type(cluster) is dict) or (not 'id' in cluster):
      raise IOError('Unexpected startCluster response format')

    return cluster

  def extendCluster(self, cluster, time):
    if cluster is None:
      return
    self.logger.info('Extending cluster %s by %s hours' % (cluster['id'], time))
    self.api.extendCluster(cluster['id'], str(time * 60))

  def extractClusterInfo(self, cluster):
    if not cluster:
      return None
    if 'cluster_info' not in cluster:
      return None
    if not cluster['cluster_info']:
      return None
    return json.loads(cluster['cluster_info'])

  def destroyCluster(self, cluster):
    if not cluster:
      return None
    self.logger.info('Destroying cluster %s (%s)' % (cluster['id'], cluster['name']))
    self.api.destroyCluster(cluster['id'])

  def waitForCluster(self, cluster, config):
    self.logger.info('Waiting for cluster %s (%s) to become ready' % (cluster['id'], cluster['name']))
    timeout_time = time.time() + config.create_timeout
    cluster_id = cluster['id']

    while True:

      # When the cluster becomes available, the cluster_info
      # structure will be populated
      cluster_info = self.extractClusterInfo(cluster)
      if cluster_info:
        self.logger.info('Cluster is alive')
        self.logger.debug('Cluster information collected: %r' % cluster_info)
        return cluster_info

      # Don't wait forever
      if time.time() > timeout_time:
        raise IOError('Timed out while waiting for cluster to become ready')

      # Apply some delay
      self.logger.debug('Sleeping for 30 seconds')
      time.sleep(30)

      # Update cluster config
      self.logger.debug('Querying for cluster #%s details' % cluster_id)
      cluster = self.api.getCluster(cluster_id)
      self.logger.debug('Cluster dump: %r' % cluster)
      if cluster is None:
        return None

if __name__ == '__main__':
  """
  Entry point
  """

  # Parse arguments
  parser = argparse.ArgumentParser(description='The DC/OS CCM API Tool')
  parser.add_argument('-c', '--create', action='store_true', dest='create',
                      help='Create a new cluster')
  parser.add_argument('-d', '--destroy', action='store_true', dest='destroy',
                      help='Destroy a cluster')
  parser.add_argument('-w', '--wait', action='store_true', dest='wait',
                      help='Wait for cluster and fetch config')
  parser.add_argument('-v', '--verbose', action='store_true', dest='verbose',
                      help='Enable verbose logging')
  parser.add_argument('-s', '--silent', action='store_true', dest='silent',
                      help='Disable all output')
  parser.add_argument('-x', '--extend', default=0, dest='extend',
                      help='Extend (or reduce) cluster lifetime (hours)')
  parser.add_argument('--id', default='', dest='id',
                      help='The cluster ID to control')
  parser.add_argument('config', nargs='*',
                      help='The configuration script to use.')
  args = parser.parse_args()

  # Setup logging
  level = logging.INFO
  if args.verbose:
    level = logging.DEBUG
  if args.silent:
    level = logging.CRITICAL
  logging.basicConfig(format='%(asctime)s: %(message)s', level=level)
  logger = logging.getLogger('ccm')

  # Validate
  if args.id and not args.id.isdigit():
    logger.error('The cluster ID must be a number')
    sys.exit(1)

  # Load config if specified
  config = CCMClusterConfig({})
  if len(args.config) > 0:
    if not os.path.exists(args.config[0]):
      logger.error('Cannot find the specified configuration file')
      sys.exit(1)
    with open(args.config[0], 'r') as f:
      config = CCMClusterConfig(json.loads(f.read()))

  # Initialize cluster manager
  manager = CCMClusterManager()

  # Handle request flags
  if args.create:
    if len(args.config) == 0:
      logger.warn('Cluster configuration is missing, using defaults')
    cluster = manager.createCluster(config)
  else:
    if args.id:
      cluster = manager.findClusterById(args.id)
    elif len(args.config) == 0:
      logger.error('Could not locate cluster. Please use a config file (with'
        ' `name` attribute), or the `--id` argument')
      sys.exit(3)
    else:
      cluster = manager.findClusterByName(config)
    if cluster is None:
      logger.error('No cluster was found. Perhaps you forgot `--create`?')
      sys.exit(1)

  # Dump script-friendly informtion regarding the cluster
  print('cluster-id: %s' % cluster['id'])
  print('cluster-name: %s' % cluster['name'])
  print('cluster-status: %s' % cluster['status_text'].lower())
  print('cluster-stackid: %s' % cluster['stack_id'])
  print('cluster-template: %s' % cluster['template_url'])

  # Wait until cluster is ready, or try to obtain cluster information asap
  if args.wait:
    cluster_info = manager.waitForCluster(cluster, config)
    if cluster_info is None:
      logger.error('Cluster was destroyed before it\'s deployment completed')
      sys.exit(2)
  else:
    cluster_info = manager.extractClusterInfo(cluster)

  # Dump cluster info
  if cluster_info:
    for key, value in cluster_info.items():
      if type(value) in (list, tuple):
        value = ','.join(value)
      elif type(value) is dict:
        value = json.dumps(value)
      print("info-%s: %s" % (key.lower(), value))

  # Extend if requested
  if args.extend != 0:
    manager.extendCluster(cluster, int(args.extend))

  # Destroy cluster if requested
  if args.destroy:
    manager.destroyCluster(cluster)

  # Everything OK
  sys.exit(0)
