#!/usr/bin/env python

import numpy as np
from matplotlib import pyplot
import json
import code
import sys
import datetime
import atexit
import os

from performance.driver.core.eventfilters import tokenizeExpression

# Require an argument
if len(sys.argv) < 2:
  print("ERROR: Please specify the raw event dump to load")
  sys.exit(1)

class ExecHelper:
  def __call__(self, file, *args, **kw):
    with open(file, 'r') as f:
      exec(f.read())

  def __repr__(self):
    return "x('filename.py') - Loads and executes the given python script"

class Event:
  """
  User-friendly abstraction to the event information
  """

  def __init__(self, num, ts, name, fields):
    """
    Constructor
    """
    self._num = num
    self._date = datetime.datetime.fromtimestamp(float(ts))
    self.ts = ts
    self.event = name
    for key, value in fields.items():
      setattr(self, key, value)

  def __repr__(self):
    return "{}{{{}}}".format(self.event, self._num)

class BulletList(list):
  def __repr__(self):
    if not len(self):
      return "(Empty)"
    return " - " + "\n - ".join(map(lambda x: str(x), self))

class EventList(BulletList):

  def __init__(self, events, traces=True):
    super().__init__(events)
    self.traces = EventTracesList(events) if traces else None
    self.byname = EventNamesDict(events)
    self.names = BulletList(sorted(list(self.byname.keys())))

  def filter(self, expression):
    tokens = tokenizeExpression(expression)
    collected = []
    for ev in self:
      foundEvent = None
      for name, attrib, flags, flagParameters, eid in tokens:
        if ev.event == name:
          foundEvent = (attrib, flags, flagParameters, eid)
          break
      if foundEvent is None:
        continue

      match = True
      for attr in foundEvent[0]:
        if not attr(ev):
          match = False
          break
      if match:
        collected.append(ev)

    return EventList(collected)

  def __getattribute__(self, name):
    """
    Return a list of attributes on attribute access
    """
    try:
      return super().__getattribute__(name)
    except AttributeError:
      ans = []
      for e in self:
        if hasattr(e, name):
          ans.append(getattr(e, name))
        else:
          ans.append(None)

      if len(ans):
        if type(ans[0]) in (int, float):
          ans = np.array(ans)
      return ans


class EventsSharingTrace(EventList):
  def __init__(self, events):
    self.traceids = []
    for event in events:
      for traceid in event.traceids:
        if not traceid in self.traceids:
          self.traceids.append(traceid)
    super().__init__(sorted(events, key=lambda x: x.ts), traces=False)


class EventTracesList(list):
  def __init__(self, events):
    # Group together events that share the same trace codes
    lookup = {}

    for event in events:
      batch = None
      for traceid in event.traceids:
        if traceid in lookup:
          batch = lookup[traceid]
          break
      if batch is None:
        batch = [event]
        for traceid in event.traceids:
          lookup[traceid] = batch
      else:
        batch.append(event)

    super().__init__(list(map(lambda x: EventsSharingTrace(x), lookup.values())))

  def __repr__(self):
    if not len(self):
      return "(Empty)"
    ans = ""
    for batch in self:
      ans += "\n\n---[ {} ]---\n".format(', '.join(batch.traceids))
      ans += repr(batch)
    return ans

  def __getattribute__(self, name):
    """
    Return the given attribute from the events from the traces
    """
    try:
      return super().__getattribute__(name)
    except AttributeError:
      ans = []
      for batch in self:
        evts = []
        for e in batch:
          evts.append(getattr(e, name))

        if len(evts):
          if type(evts[0]) in (int, float):
            evts = np.array(evts)
        ans.append(evts)

      if len(ans) and type(ans[0]) is np.ndarray:
        ans = np.array(ans)
      return ans

class EventTracesDict(dict):
  def __init__(self, events):
    super().__init__()

    # Group together events that share the same trace codes


    # Find out root traces
    for event in events:
      if event.event == 'ParameterUpdateEvent':
        for traceid in event.traceids:
          if not traceid in self:
            self[traceid] = []
          self[traceid].append(event)

    # Put events in root traces
    for event in events:
      for traceid in event.traceids:
        if traceid in self:
          self[traceid].append(event)


class EventNamesDict(dict):
  def __init__(self, events):
    for event in events:
      if not event.event in self:
        self[event.event] = []
      self[event.event].append(event)

# Load in memory
print("Loading raw events from {}".format(sys.argv[1]))
rawevents = []
i = 0
with open(sys.argv[1], 'r') as f:
  for line in f:
    (ts, name, fields) = line.strip().split(';', 2)
    fields = json.loads(fields)
    i += 1
    event = Event(i, ts, name, fields)

    # Collect event
    rawevents.append(event)

# Create high-level interface
events = EventList(rawevents)

# Fancy readline support.
try:
  import readline
  history_file = os.path.expanduser('~/.dcos-events-repl.history')
  if not os.path.exists(os.path.dirname(history_file)):
    os.makedirs(os.path.dirname(history_file))
  atexit.register(lambda: readline.write_history_file(history_file))
  if os.path.exists(history_file):
    readline.read_history_file(history_file)
  import rlcompleter
  if(sys.platform == 'darwin'):
    readline.parse_and_bind ("bind ^I rl_complete")
  else:
    readline.parse_and_bind("tab: complete")
except ImportError as e:
  pass

# Start interactive console
code.interact(
  banner="""
  .--.            .--.
 ( (`\\\\."--``--".//`) )   DC/OS Performance Test Driver - Debugging Panther
  '-.   __   __    .-'
   /   /__\\ /__\\   \\      1. I have loaded {}
  |    \\ 0/ \\ 0/    |     2. Check `events`
  \\     `/   \\`     /
   `-.  /-""\"-\\  .-`
     /  '.___.'  \\
     \\     I     /
      `;--'`'--;`
        '.___.'
""".format(sys.argv[1]),
  local={
    "events": events,
    "x": ExecHelper(),

    # Frequently used modules
    "np": np,
    "plt": pyplot,
    "json": json
  }
)
