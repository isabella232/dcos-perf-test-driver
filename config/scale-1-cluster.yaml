# The config section contains the general test configuration
config:
  runs: 10
  title: Deployment Times

  metrics:
    - name: startTime
      desc: The deployment time from HTTP request till the deployment success

    - name: requestTime
      desc: The deployment time from start to end

    - name: deployTime
      desc: The deployment time from start to end

  parameters:
    - name: instances
      desc: The number of parameters

  definitions:
    - name: cluster_url
      desc: The URL to the deployed DC/OS cluster
      required: yes

# Tasks are stand-alone actions that are executed at various lifecycle phases
# of the tests.
tasks:
  - class: tasks.auth.AuthEE
    at: setup
    password: deleteme
    user: bootstrapuser

  - class: tasks.marathon.RemoveAllApps
    at: teardown

# Policies are driving the evolvement of the parameters over time
policies:
  # - class: policy.SingleDeploymentPolicy
  #   parameters:
  #     instances: 1

  - class: policy.ChainedDeploymentPolicy
    steps:
      - instances: 1
      - instances: 10
      - instances: 100

# Channels establish the way the parameters are given to the applicataion
channels:

  - class: channel.HTTPChannel
    url: "{{cluster_url}}/marathon/v2/apps"
    verb: POST
    headers:
      Authorization: token={{auth_token}}
    body: |
      {
        "cmd": "sleep 1200",
        "cpus": 0.01,
        "mem": 32,
        "disk": 0,
        "instances": {{instances}},
        "id": "{{uuid()}}"
      }

# Observers extract events from the channel
observers:
  - class: observer.MarathonEventsObserver
    url: "{{cluster_url}}/marathon/v2/events"
    headers:
      Authorization: token={{auth_token}}

# Trackers receive events and extract metrics
trackers:
  - class: tracker.DurationTracker
    metric: startTime
    events:
      start: HTTPRequestStartEvent
      end: MarathonDeploymentSuccessEvent

  - class: tracker.DurationTracker
    metric: requestTime
    events:
      start: HTTPRequestStartEvent
      end: HTTPResponseStartEvent

  - class: tracker.DurationTracker
    metric: deployTime
    events:
      start: HTTPResponseEndEvent
      end: MarathonDeploymentSuccessEvent
